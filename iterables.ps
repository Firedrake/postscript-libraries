%!PS

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/values { % dict -> array of dict values
    [ exch
      {
          exch pop
      } forall
    ]
} bind def

/toset { % array -> dict of (value, true)
    << exch
       {
           true
       } forall
    >>
} bind def

/map { % array proc -> array
    2 dict begin
    /p exch def
    [ exch
      {
          p
      } forall
    ]
} bind def

/filter { % array proc(bool) -> array
    1 dict begin
    /p exch def
    [ exch
      {
          dup p not
          {
              pop
          } if
      } forall
    ]
    end
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/reduce_init { % value array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    0 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/enumerate {
    1 dict begin
    /a exch def
    [
      0 1 a length 1 sub {
          dup a exch get
      } for
    ]
    end
} bind def

/enumerate.array {
    1 dict begin
    /a exch def
    [
      0 1 a length 1 sub {
          [ exch dup a exch get ]
      } for
    ]
    end
} bind def

/apush.right { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def

% [ (a) (b) ] (c) apush (, ) strjoin =

/apop.right { % [a b c] -> [a b] c
    [ exch aload length 1 add 1 roll ] exch
} bind def

% [ (a) (b) (c) ] apop = (, ) strjoin =

/apop.left { % [a b c] -> [b c] a
    dup 0 get exch
    [ exch aload length -1 roll pop ] exch
} bind def

/apush.left { % [b c] a -> [a b c]
    exch % a [b c]
    [ 3 1 roll aload pop ]
} bind def

/apush { apush.right } bind def
/apop { apop.left } bind def

/all { % [a b] proc -> bool
    1 dict begin
    /p exch def
    true exch
    {
        p not {
            pop false
            exit
        } if
    } forall
    end
} bind def

/any { % [a b] proc -> bool
    1 dict begin
    /p exch def
    false exch
    {
        p {
            pop true
            exit
        } if
    } forall
    end
} bind def

/listmax {
    { max } reduce
} bind def

/listmin {
    { min } reduce
} bind def

/unique {
    toset keys
} bind def
